{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PlayerPicto","props","useState","selected","setselected","Col","xs","style","position","className","onClick","currentPlayer","playerOneSelectedParent","name","width","top","src","Player","display","alignItems","flexDirection","player","App","playerOne","playerTwo","setcurrentPlayer","playerOneSelected","setplayerOneSelected","playerTwoSelected","setplayerTwoSelected","playerSelected","playerPictos","map","character","Container","justifyContent","Row","paddingBottom","cursor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPA0FA,SAASA,EAAYC,GAAQ,IAAD,EACMC,mBAAS,MADf,mBACnBC,EADmB,KACTC,EADS,KAU1B,OACE,kBAACC,EAAA,EAAD,CACEC,GAAG,IACHC,MAAO,CAAEC,SAAU,YACnBC,UAAU,MACVC,QAZgB,WACdT,EAAMU,gBACRV,EAAMW,wBAAwBX,EAAMY,MACpCT,EAAYH,EAAMU,kBAWlB,yBACEJ,MAAO,CAAEO,MAAO,OAAQN,SAAU,WAAYO,IAAK,OACnDC,IAAKb,EAAQ,mBAAeA,EAAf,gBAAwC,OAEvD,yBACEI,MAAO,CAAEO,MAAO,QAChBE,IAAG,gCAA2Bf,EAAMY,KAAjC,WAMX,SAASI,EAAOhB,GACd,OACE,yBACEM,MAAO,CAAEW,QAAS,OAAQC,WAAY,SAAUC,cAAe,WAE/D,yBAAKb,MAAO,CAAEO,MAAO,OAASE,IAAG,mBAAcf,EAAMoB,OAApB,WACjC,yBACEd,MAAO,CAAEO,MAAO,QAChBE,IAAG,iCAA4Bf,EAAMY,KAAlC,WAMIS,MAjIf,WACE,IAyBIC,EAKAC,EA/BS,EAY6BtB,mBAAS,GAZtC,mBAYNS,EAZM,KAYSc,EAZT,OAaqCvB,mBAAS,MAb9C,mBAaNwB,EAbM,KAaaC,EAbb,OAcqCzB,mBAAS,MAd9C,mBAcN0B,EAdM,KAcaC,EAdb,KAgBTC,EAAiB,SAACjB,GACC,GAAjBF,GACFc,EAAiB,GACjBE,EAAqBd,IACK,GAAjBF,IACTc,EAAiB,MACjBI,EAAqBhB,KAKrBa,IACFH,EAAY,kBAACN,EAAD,CAAQJ,KAAMa,EAAmBL,OAAQ,KAInDO,IACFJ,EAAY,kBAACP,EAAD,CAAQJ,KAAMe,EAAmBP,OAAQ,KAGvD,IAAMU,EAnCa,CACjB,SACA,UACA,UACA,QACA,QACA,MACA,MACA,WA2B8BC,KAAI,SAACC,GAAD,OAClC,kBAACjC,EAAD,CACEY,wBAAyBkB,EACzBjB,KAAMoB,EACNtB,cAAeA,OAInB,OACE,kBAACuB,EAAA,EAAD,CACE3B,MAAO,CAAEW,QAAS,OAAQiB,eAAgB,UAC1C1B,UAAU,eAEV,kBAAC2B,EAAA,EAAD,CAAK3B,UAAU,SACb,kBAACJ,EAAA,EAAD,CAAKC,GAAG,IAAIG,UAAU,6CACnBc,GAEH,kBAAClB,EAAA,EAAD,CACEC,GAAG,IACHC,MAAO,CACLW,QAAS,OACTC,WAAY,SACZC,cAAe,UAEjBX,UAAU,0BAEV,yBACEF,MAAO,CAAEO,MAAO,OAAQuB,cAAe,QACvCrB,IAAI,+BAGN,kBAACoB,EAAA,EAAD,CACE7B,MAAO,CACL+B,OAAQ,UACRpB,QAAS,OACTE,cAAe,OAEjBX,UAAU,SAETsB,IAGL,kBAAC1B,EAAA,EAAD,CAAKC,GAAG,IAAIG,UAAU,6CACnBe,MCvESe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.da36f390.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nfunction App() {\n  const characters = [\n    \"blanka\",\n    \"chun-li\",\n    \"dhalsim\",\n    \"guile\",\n    \"honda\",\n    \"ken\",\n    \"ryu\",\n    \"zangief\",\n  ];\n\n  const [currentPlayer, setcurrentPlayer] = useState(1);\n  const [playerOneSelected, setplayerOneSelected] = useState(null);\n  const [playerTwoSelected, setplayerTwoSelected] = useState(null);\n\n  var playerSelected = (name) => {\n    if (currentPlayer == 1) {\n      setcurrentPlayer(2);\n      setplayerOneSelected(name);\n    } else if (currentPlayer == 2) {\n      setcurrentPlayer(null);\n      setplayerTwoSelected(name);\n    }\n  };\n\n  var playerOne;\n  if (playerOneSelected) {\n    playerOne = <Player name={playerOneSelected} player={1} />;\n  }\n\n  var playerTwo;\n  if (playerTwoSelected) {\n    playerTwo = <Player name={playerTwoSelected} player={2} />;\n  }\n\n  const playerPictos = characters.map((character) => (\n    <PlayerPicto\n      playerOneSelectedParent={playerSelected}\n      name={character}\n      currentPlayer={currentPlayer}\n    />\n  ));\n\n  return (\n    <Container\n      style={{ display: \"flex\", justifyContent: \"center\" }}\n      className=\"h-100 w-100\"\n    >\n      <Row className=\"w-100\">\n        <Col xs=\"4\" className=\"d-flex flex-column justify-content-center\">\n          {playerOne}\n        </Col>\n        <Col\n          xs=\"4\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n          className=\"justify-content-center\"\n        >\n          <img\n            style={{ width: \"100%\", paddingBottom: \"50px\" }}\n            src=\"./images/player-select.jpg\"\n          />\n\n          <Row\n            style={{\n              cursor: \"pointer\",\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n            className=\"w-100\"\n          >\n            {playerPictos}\n          </Row>\n        </Col>\n        <Col xs=\"4\" className=\"d-flex flex-column justify-content-center\">\n          {playerTwo}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction PlayerPicto(props) {\n  const [selected, setselected] = useState(null);\n\n  const handleClick = () => {\n    if (props.currentPlayer) {\n      props.playerOneSelectedParent(props.name);\n      setselected(props.currentPlayer);\n    }\n  };\n\n  return (\n    <Col\n      xs=\"3\"\n      style={{ position: \"relative\" }}\n      className=\"p-0\"\n      onClick={handleClick}\n    >\n      <img\n        style={{ width: \"100%\", position: \"absolute\", top: \"-9%\" }}\n        src={selected ? `./images/${selected}p-select.png` : null}\n      />\n      <img\n        style={{ width: \"100%\" }}\n        src={`./images/players/tiny/${props.name}.jpg`}\n      />\n    </Col>\n  );\n}\n\nfunction Player(props) {\n  return (\n    <div\n      style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}\n    >\n      <img style={{ width: \"40%\" }} src={`./images/${props.player}p.jpg`} />\n      <img\n        style={{ width: \"100%\" }}\n        src={`./images/players/large/${props.name}.jpg`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}